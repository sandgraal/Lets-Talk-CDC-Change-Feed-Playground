version: "3.8"
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: demo
    ports:
      - "5432:5432"
    volumes:
      - ./generator/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d demo"]
      interval: 5s
      timeout: 5s
      retries: 12

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 5s
      timeout: 5s
      retries: 12

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CLIENT_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 7s
      timeout: 5s
      retries: 10

  connect:
    image: debezium/connect:2.6
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 7s
      timeout: 5s
      retries: 10

  connectors:
    image: node:20-alpine
    working_dir: /app
    depends_on:
      connect:
        condition: service_healthy
    volumes:
      - ./scripts/register-connectors.mjs:/app/register-connectors.mjs:ro
      - ./connectors:/app/connectors:ro
    environment:
      CONNECT_BASE_URL: http://connect:8083
      CONNECTORS_DIR: /app/connectors
      CONNECT_APPLY_TIMEOUT_MS: 120000
    command: ["node", "register-connectors.mjs"]
    restart: "no"

  generator:
    build: ./generator
    depends_on:
      postgres:
        condition: service_healthy
      connectors:
        condition: service_completed_successfully
    environment:
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: demo
      SCENARIO_PATH: /app/scenario.json
    volumes:
      - ./scenario.json:/app/scenario.json:ro

  verifier:
    build: ./verifier
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERS: kafka:29092
      TOPIC: dbserver1.public.customers
      SCENARIO_PATH: /app/scenario.json
    ports:
      - "8089:8089"
    volumes:
      - ./scenario.json:/app/scenario.json:ro
      - ./fixtures:/app/fixtures:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 7s
      timeout: 5s
      retries: 10
